@use "sass:math";

.row {
    box-sizing: border-box;
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    margin-right: math.div($spacer, 2) * -1;
    margin-left: math.div($spacer, 2) * -1;
}

.container-fluid,
.container,
.container-sm {
    margin-right: auto;
    margin-left: auto;
}

.container-fluid {
    padding-right: $spacer;
    padding-left: $spacer;
}

.container {
    padding-right: $spacer;
    padding-left: $spacer;
}

.container-sm {
    padding-right: $spacer;
    padding-left: $spacer;
    max-width: rem(1200);
}

// Fix weird scrollbars on full width containers.
.row-fill {
    margin: 0;
    > .col {
        padding: 0;
    }
}

.col.reverse {
    flex-direction: column-reverse;
}

.col {
    padding-right: math.div($spacer, 2);
    padding-left: math.div($spacer, 2);
}

.row.reverse {
    flex-direction: row-reverse;
}

@mixin margins($infix: '') {
    @each $prop, $abbrev in (margin: m, padding: p) {
        @each $size, $length in $spacers {
            .#{$abbrev}#{$infix}-#{$size} {
                #{$prop}: $length !important;
            }

            .#{$abbrev}t#{$infix}-#{$size},
            .#{$abbrev}y#{$infix}-#{$size} {
                #{$prop}-top: $length !important;
            }

            .#{$abbrev}r#{$infix}-#{$size},
            .#{$abbrev}x#{$infix}-#{$size} {
                #{$prop}-right: $length !important;
            }

            .#{$abbrev}b#{$infix}-#{$size},
            .#{$abbrev}y#{$infix}-#{$size} {
                #{$prop}-bottom: $length !important;
            }

            .#{$abbrev}l#{$infix}-#{$size},
            .#{$abbrev}x#{$infix}-#{$size} {
                #{$prop}-left: $length !important;
            }
        }
    }

    // Negative margins (e.g., where `.mb-n1` is negative version of `.mb-1`)
    @each $size, $length in $spacers {
        @if $size !=0 {
            .m#{$infix}-n#{$size} {
                margin: -$length !important;
            }

            .mt#{$infix}-n#{$size},
            .my#{$infix}-n#{$size} {
                margin-top: -$length !important;
            }

            .mr#{$infix}-n#{$size},
            .mx#{$infix}-n#{$size} {
                margin-right: -$length !important;
            }

            .mb#{$infix}-n#{$size},
            .my#{$infix}-n#{$size} {
                margin-bottom: -$length !important;
            }

            .ml#{$infix}-n#{$size},
            .mx#{$infix}-n#{$size} {
                margin-left: -$length !important;
            }
        }
    }

    // Responsive auto margins
    .m#{$infix}-auto {
        margin: auto !important;
    }

    .mt#{$infix}-auto,
    .my#{$infix}-auto {
        margin-top: auto !important;
    }

    .mr#{$infix}-auto,
    .mx#{$infix}-auto {
        margin-right: auto !important;
    }

    .mb#{$infix}-auto,
    .my#{$infix}-auto {
        margin-bottom: auto !important;
    }

    .ml#{$infix}-auto,
    .mx#{$infix}-auto {
        margin-left: auto !important;
    }
}

@mixin gridCol($size: '') {
    .col#{$size},
    .col#{$size}-1,
    .col#{$size}-2,
    .col#{$size}-3,
    .col#{$size}-4,
    .col#{$size}-5,
    .col#{$size}-6,
    .col#{$size}-7,
    .col#{$size}-8,
    .col#{$size}-9,
    .col#{$size}-10,
    .col#{$size}-11,
    .col#{$size}-12,
    .col#{$size}-offset-0,
    .col#{$size}-offset-1,
    .col#{$size}-offset-2,
    .col#{$size}-offset-3,
    .col#{$size}-offset-4,
    .col#{$size}-offset-5,
    .col#{$size}-offset-6,
    .col#{$size}-offset-7,
    .col#{$size}-offset-8,
    .col#{$size}-offset-9,
    .col#{$size}-offset-10,
    .col#{$size}-offset-11,
    .col#{$size}-offset-12 {
        box-sizing: border-box;
        flex: 0 0 auto;
        padding-right: math.div($spacer, 2);
        padding-left: math.div($spacer, 2);
    }

    .col#{$size} {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
    }

    @for $i from 1 through $col_count {
        $width: math.div(100%, math.div($col_count, $i));
        .col#{$size}-#{$i} {
            flex-basis: $width;
            max-width: $width;
        }

        .col#{$size}-offset-#{$i} {
            margin-left: $width;
        }
    }

    .col#{$size}-auto {
        flex-basis: auto;
    }

    .col#{$size}-centered,
    .col#{$size}-centered:last-child {
        margin-left: auto;
        margin-right: auto;
        float: none;
    }

    .start#{$size} {
        justify-content: flex-start;
        text-align: start;
    }

    .center#{$size} {
        justify-content: center;
        text-align: center;
    }

    .end#{$size} {
        justify-content: flex-end;
        text-align: end;
    }

    .top#{$size} {
        align-items: flex-start;
    }

    .middle#{$size} {
        align-items: center;
    }

    .bottom#{$size} {
        align-items: flex-end;
    }

    .around#{$size} {
        justify-content: space-around;
    }

    .between#{$size} {
        justify-content: space-between;
    }

    .first#{$size} {
        order: -1;
    }

    .last#{$size} {
        order: 1;
    }
    .wrap#{$size} {
        flex-wrap: wrap;
    }
}

@each $breakpoint in map-keys($standard-breakpoints) {
    @include breakpoint($breakpoint) {
        $infix: get-breakpoint-infix($breakpoint);
        $container-width: map-get($container-widths, $breakpoint);

        @if $container-width {
            .container {
                max-width: rem($container-width);
            }
        }

        @include margins($infix);
        @include gridCol($infix);
    }
}
