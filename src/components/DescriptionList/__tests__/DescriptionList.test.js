import React from 'react';
import TestRenderer from 'react-test-renderer';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import DescriptionList from '../index';
import LabelValuePair from '../LabelValuePair';

test('handles improperly shaped labelValuePairs array', async () => {
    render(<DescriptionList labelValuePairs={['label', 'value']} />);

    const getElement = () => {
        screen.getByTestId('list-description');
    };

    expect(getElement).toThrow();
});

test('handles labelValuePairs prop that is not an array', async () => {
    render(<DescriptionList labelValuePairs={'string'} />);

    const getElement = () => {
        screen.getByTestId('list-description');
    };

    expect(getElement).toThrow();
});

const validLabelValuePairs = [['label', 'value']];

test('renders a properly shaped description list (dl)', async () => {
    render(<DescriptionList labelValuePairs={validLabelValuePairs} />);

    const list = screen.getByTestId('list-description');
    const pair = screen.getByTestId('label-value-pair');
    const term = screen.getByTestId('term');
    const description = screen.getByTestId('description');

    expect(list).toHaveClass('list-description');
    expect(list).toContainElement(pair);

    expect(pair).toHaveClass('label-value-pair');
    expect(pair).toContainElement(term);
    expect(pair).toContainElement(description);
});

test('renders description list with autogenerated id', async () => {
    render(<DescriptionList labelValuePairs={validLabelValuePairs} />);

    const list = screen.getByTestId('list-description');

    expect(list).toHaveAttribute('id');
});

test('renders description list with a custom id', async () => {
    render(<DescriptionList id="custom-id" labelValuePairs={validLabelValuePairs} />);

    const list = screen.getByTestId('list-description');

    expect(list).toHaveAttribute('id', 'custom-id');
});

test('renders description list with a custom list class', async () => {
    render(<DescriptionList listClass="custom-list-class" labelValuePairs={validLabelValuePairs} />);

    const list = screen.getByTestId('list-description');

    expect(list).toHaveClass('custom-list-class');
});

test('renders description list with a custom list item class', async () => {
    render(<DescriptionList itemClass="custom-item-class" labelValuePairs={validLabelValuePairs} />);

    const listItem = screen.getByTestId('label-value-pair');

    expect(listItem).toHaveClass('custom-item-class');
});

test('has custom key when label is react fragment', async () => {
    const testRenderer = TestRenderer.create(
        <DescriptionList
            labelValuePairs={[
                [
                    <React.Fragment key="test-key">
                        <span>Test Label</span>
                    </React.Fragment>,
                    'Test Value'
                ]
            ]}
        />
    );
    const testInstance = testRenderer.root;

    expect(testInstance.findByType(LabelValuePair)._fiber.key).toBe('test-key_0');
});

test('has default key when label is react fragment', async () => {
    const testRenderer = TestRenderer.create(
        <DescriptionList labelValuePairs={[[<span>Test Label</span>, 'Test Value']]} />
    );
    const testInstance = testRenderer.root;

    expect(testInstance.findByType(LabelValuePair)._fiber.key).toBe('react-element_0');
});

test('has key when label is string', async () => {
    const testRenderer = TestRenderer.create(<DescriptionList labelValuePairs={[['Test Label', 'Test Value']]} />);
    const testInstance = testRenderer.root;

    expect(testInstance.findByType(LabelValuePair)._fiber.key).toBe('test label_0');
});
